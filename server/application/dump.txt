class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    authors = db.Column(db.String(255), nullable=False)
    date_issued = db.Column(db.Date, nullable=True)
    return_date = db.Column(db.Date, nullable=True)
    section_id = db.Column(db.Integer, db.ForeignKey('section.id'), nullable=False)
    section = db.relationship('Section', backref=db.backref('books', lazy=True))
    file_path = db.Column(db.String(255), nullable=True)


class BooksBySectionResource(Resource):
    def get(self, section_id):
                
        search_query = request.args.get('q', '')
        section = Section.query.get_or_404(section_id)
        
        books = Book.query.filter_by(section_id=section_id).filter(or_(Book.name.ilike(f"%{search_query}%"), Book.authors.ilike(f"%{search_query}%"))).all()
        book_data = [{'name': book.name, 'content': book.content, 'authors': book.authors, 
                      'date_issued': book.date_issued, 'return_date': book.return_date, 
                      'file_path': book.file_path, 'rating': book.rating, 
                      'comments': [comment.text for comment in book.comments]} for book in books]
        return {'section_name': section.name, 'books': book_data}, 200
    
class DeleteBookResource(Resource):
    def delete(self,book_id):
        book=Book.query.get(book_id)
        if book is None:
            return {'message': 'Book not found'}, 404
        db.session.delete(book)
        db.session.commit()
        return {'message': 'Book deleted'}, 200
    
class UpdateBookResource(Resource):
    def post(self, book_id):
        parser = reqparse.RequestParser()
        parser.add_argument('section_id', type=int)
        parser.add_argument('name', type=str)
        parser.add_argument('content', type=str)
        parser.add_argument('authors', type=str)
        parser.add_argument('date_issued', type=str)
        parser.add_argument('return_date', type=str)
        parser.add_argument('file_path', type=str)
        args = parser.parse_args()

        book = Book.query.get(book_id)
        if book is None:
            return {'message': 'Book not found'},   404

        if 'section_id' in args:
            book.section_id = args['section_id']
        if 'name' in args:
            book.name = args['name']
        if 'content' in args:
            book.content = args['content']
        if 'authors' in args:
            book.authors = args['authors']
        if 'date_issued' in args:
            book.date_issued = datetime.strptime(args['date_issued'], '%d-%m-%Y')  
        if 'return_date' in args:
            book.return_date = datetime.strptime(args['return_date'], '%d-%m-%Y')  
        if 'file_path' in args:
            book.file_path = args['file_path']

        db.session.commit()
        return {'message': 'Book updated successfully'},   200     

class BookResource(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('section_id', type=int, required=True)
        parser.add_argument('name', type=str, required=True)
        parser.add_argument('content', type=str, required=True)
        parser.add_argument('authors', type=str, required=True)
        parser.add_argument('date_issued', type=str, required=True)
        parser.add_argument('return_date', type=str, required=True)
        args = parser.parse_args()

        
        file_path = request.json.get('file_path')

        new_book = Book(name=args['name'], content=args['content'], authors=args['authors'], 
                         date_issued=args['date_issued'], return_date=args['return_date'], 
                         section_id=args['section_id'], file_path=file_path)

        db.session.add(new_book)
        db.session.commit()

        return {'message': 'Book added successfully'}, 201        
