import './style.css';
import { type PropType } from 'vue-demi';
import type { Rendition } from 'epubjs';
declare const _default: import("vue-demi").DefineComponent<{
    url: {
        required: true;
    };
    location: {};
    tocChanged: {
        type: PropType<((toc: import("epubjs").NavItem[]) => void) | undefined>;
    };
    getRendition: {
        type: PropType<((rendition: Rendition) => void) | undefined>;
    };
    epubInitOptions: {
        type: PropType<import("epubjs/types/book").BookOptions | undefined>;
        default: () => {};
    };
    epubOptions: {
        type: PropType<import("epubjs/types/rendition").RenditionOptions | undefined>;
        default: () => {};
    };
}, () => import("vue-demi").VNode<import("vue-demi").RendererNode, import("vue-demi").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, import("vue-demi").EmitsOptions, string, import("vue-demi").VNodeProps & import("vue-demi").AllowedComponentProps & import("vue-demi").ComponentCustomProps, Readonly<import("vue-demi").ExtractPropTypes<{
    url: {
        required: true;
    };
    location: {};
    tocChanged: {
        type: PropType<((toc: import("epubjs").NavItem[]) => void) | undefined>;
    };
    getRendition: {
        type: PropType<((rendition: Rendition) => void) | undefined>;
    };
    epubInitOptions: {
        type: PropType<import("epubjs/types/book").BookOptions | undefined>;
        default: () => {};
    };
    epubOptions: {
        type: PropType<import("epubjs/types/rendition").RenditionOptions | undefined>;
        default: () => {};
    };
}>>, {
    epubInitOptions: import("epubjs/types/book").BookOptions | undefined;
    epubOptions: import("epubjs/types/rendition").RenditionOptions | undefined;
}>;
export default _default;
//# sourceMappingURL=EpubView.d.ts.map